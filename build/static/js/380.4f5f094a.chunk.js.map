{"version":3,"file":"static/js/380.4f5f094a.chunk.js","mappings":"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","sources":["features/charts/components/LineChart.js","features/charts/components/BarChart.js","features/charts/components/DoughnutChart.js","features/charts/components/PieChart.js","features/charts/components/ScatterChart.js","features/charts/components/StackBarChart.js","features/charts/index.js","pages/protected/Charts.js"],"sourcesContent":["import {\n  Chart as ChartJS,\n  CategoryScale,\n  LinearScale,\n  PointElement,\n  LineElement,\n  Title,\n  Tooltip,\n  Filler,\n  Legend,\n} from 'chart.js';\nimport { Line } from 'react-chartjs-2';\nimport TitleCard from '../../../components/Cards/TitleCard';\n\nChartJS.register(\n  CategoryScale,\n  LinearScale,\n  PointElement,\n  LineElement,\n  Title,\n  Tooltip,\n  Filler,\n  Legend\n);\n\nfunction LineChart(){\n\n  const options = {\n    responsive: true,\n    plugins: {\n      legend: {\n        position: 'top',\n      },\n    },\n  };\n\n  \n  const labels = ['January', 'February', 'March', 'April', 'May', 'June', 'July'];\n\n  const data = {\n  labels,\n  datasets: [\n    {\n      fill: true,\n      label: 'MAU',\n      data: labels.map(() => { return Math.random() * 100 + 500 }),\n      borderColor: 'rgb(53, 162, 235)',\n      backgroundColor: 'rgba(53, 162, 235, 0.5)',\n    },\n  ],\n};\n  \n\n    return(\n      <TitleCard title={\"Montly Active Users (in k)\"} >\n          <Line data={data} options={options}/>\n      </TitleCard>\n    )\n}\n\n\nexport default LineChart","import {\n  Chart as ChartJS,\n  CategoryScale,\n  LinearScale,\n  BarElement,\n  Title,\n  Tooltip,\n  Legend,\n} from 'chart.js';\nimport { Bar } from 'react-chartjs-2';\nimport TitleCard from '../../../components/Cards/TitleCard';\n\nChartJS.register(CategoryScale, LinearScale, BarElement, Title, Tooltip, Legend);\n\nfunction BarChart(){\n\n    const options = {\n        responsive: true,\n        plugins: {\n          legend: {\n            position: 'top',\n          }\n        },\n      };\n      \n      const labels = ['January', 'February', 'March', 'April', 'May', 'June', 'July'];\n      \n      const data = {\n        labels,\n        datasets: [\n          {\n            label: 'Store 1',\n            data: labels.map(() => { return Math.random() * 1000 + 500 }),\n            backgroundColor: 'rgba(255, 99, 132, 1)',\n          },\n          {\n            label: 'Store 2',\n            data: labels.map(() => { return Math.random() * 1000 + 500 }),\n            backgroundColor: 'rgba(53, 162, 235, 1)',\n          },\n        ],\n      };\n\n    return(\n      <TitleCard title={\"No of Orders\"} topMargin=\"mt-2\">\n            <Bar options={options} data={data} />\n      </TitleCard>\n\n    )\n}\n\n\nexport default BarChart","import {\n  Chart as ChartJS,\n  Filler,\n  ArcElement,\n  Title,\n  Tooltip,\n  Legend,\n} from 'chart.js';\nimport { Doughnut } from 'react-chartjs-2';\nimport TitleCard from '../../../components/Cards/TitleCard';\nimport Subtitle from '../../../components/Typography/Subtitle';\n\nChartJS.register(ArcElement, Tooltip, Legend,\n    Tooltip,\n    Filler,\n    Legend);\n\nfunction DoughnutChart(){\n\n    const options = {\n        responsive: true,\n        plugins: {\n          legend: {\n            position: 'top',\n          },\n        },\n      };\n      \n      const labels = ['Electronics', 'Home Applicances', 'Beauty', 'Furniture', 'Watches', 'Apparel'];\n      \n      const data = {\n        labels,\n        datasets: [\n            {\n                label: '# of Orders',\n                data: [122, 219, 30, 51, 82, 13],\n                backgroundColor: [\n                  'rgba(255, 99, 132, 0.8)',\n                  'rgba(54, 162, 235, 0.8)',\n                  'rgba(255, 206, 86, 0.8)',\n                  'rgba(75, 192, 192, 0.8)',\n                  'rgba(153, 102, 255, 0.8)',\n                  'rgba(255, 159, 64, 0.8)',\n                ],\n                borderColor: [\n                  'rgba(255, 99, 132, 1)',\n                  'rgba(54, 162, 235, 1)',\n                  'rgba(255, 206, 86, 1)',\n                  'rgba(75, 192, 192, 1)',\n                  'rgba(153, 102, 255, 1)',\n                  'rgba(255, 159, 64, 1)',\n                ],\n                borderWidth: 1,\n              }\n        ],\n      };\n\n    return(\n        <TitleCard title={\"Orders by Category\"}>\n                <Doughnut options={options} data={data} />\n        </TitleCard>\n    )\n}\n\n\nexport default DoughnutChart","import {\n    Chart as ChartJS,\n    Filler,\n    ArcElement,\n    Title,\n    Tooltip,\n    Legend,\n  } from 'chart.js';\n  import { Pie } from 'react-chartjs-2';\n  import TitleCard from '../../../components/Cards/TitleCard';\n  import Subtitle from '../../../components/Typography/Subtitle';\n  \n  ChartJS.register(ArcElement, Tooltip, Legend,\n      Tooltip,\n      Filler,\n      Legend);\n  \n  function PieChart(){\n  \n      const options = {\n          responsive: true,\n          plugins: {\n            legend: {\n              position: 'top',\n            },\n          },\n        };\n        \n        const labels = ['India', 'Middle East', 'Europe', 'US', 'Latin America', 'Asia(non-india)'];\n        \n        const data = {\n          labels,\n          datasets: [\n              {\n                  label: '# of Orders',\n                  data: [122, 219, 30, 51, 82, 13],\n                  backgroundColor: [\n                    'rgba(255, 99, 255, 0.8)',\n                    'rgba(54, 162, 235, 0.8)',\n                    'rgba(255, 206, 255, 0.8)',\n                    'rgba(75, 192, 255, 0.8)',\n                    'rgba(153, 102, 255, 0.8)',\n                    'rgba(255, 159, 255, 0.8)',\n                  ],\n                  borderColor: [\n                    'rgba(255, 99, 255, 1)',\n                    'rgba(54, 162, 235, 1)',\n                    'rgba(255, 206, 255, 1)',\n                    'rgba(75, 192, 255, 1)',\n                    'rgba(153, 102, 255, 1)',\n                    'rgba(255, 159, 255, 1)',\n                  ],\n                  borderWidth: 1,\n                }\n          ],\n        };\n  \n      return(\n          <TitleCard title={\"Orders by country\"}>\n                  <Pie options={options} data={data} />\n          </TitleCard>\n      )\n  }\n  \n  \n  export default PieChart","import {\n    Chart as ChartJS,\n    Filler,\n    ArcElement,\n    Tooltip,\n    Legend,\n  } from 'chart.js';\n  import { Scatter } from 'react-chartjs-2';\n  import TitleCard from '../../../components/Cards/TitleCard';\n  \n  ChartJS.register(ArcElement, Tooltip, Legend,\n      Tooltip,\n      Filler,\n      Legend);\n  \n  function ScatterChart(){\n  \n      const options = {\n            scales: {\n                y: {\n                    beginAtZero: true,\n                },\n            },\n        };\n        \n        const data = {\n          datasets: [\n            {\n              label: 'Orders > 1k',\n              data: Array.from({ length: 100 }, () => ({\n                x: Math.random() * 11,\n                y: Math.random() * 31,\n              })),\n              backgroundColor: 'rgba(255, 99, 132, 1)',\n            },\n            {\n                label: 'Orders > 2K',\n                data: Array.from({ length: 100 }, () => ({\n                  x: Math.random() * 12,\n                  y: Math.random() * 12,\n                })),\n                backgroundColor: 'rgba(0, 0, 255, 1)',\n              },\n          ],\n        };\n  \n      return(\n          <TitleCard title={\"No of Orders by month (in k)\"}>\n                  <Scatter options={options} data={data} />\n          </TitleCard>\n      )\n  }\n  \n  \n  export default ScatterChart","import {\n    Chart as ChartJS,\n    CategoryScale,\n    LinearScale,\n    BarElement,\n    Title,\n    Tooltip,\n    Legend,\n  } from 'chart.js';\n  import { Bar } from 'react-chartjs-2';\n  import TitleCard from '../../../components/Cards/TitleCard';\n  \n  ChartJS.register(CategoryScale, LinearScale, BarElement, Title, Tooltip, Legend);\n  \n  function StackBarChart(){\n  \n      const options = {\n            responsive: true,\n            scales: {\n                x: {\n                    stacked: true,\n                },\n                y: {\n                    stacked: true,\n                },\n            },\n        };\n        \n        const labels = ['January', 'February', 'March', 'April', 'May', 'June', 'July'];\n        \n        const data = {\n          labels,\n          datasets: [\n            {\n              label: 'Store 1',\n              data: labels.map(() => { return Math.random() * 1000 + 500 }),\n              backgroundColor: 'rgba(255, 99, 132, 1)',\n            },\n            {\n              label: 'Store 2',\n              data: labels.map(() => { return Math.random() * 1000 + 500 }),\n              backgroundColor: 'rgba(53, 162, 235, 1)',\n            },\n            {\n                label: 'Store 3',\n                data: labels.map(() => { return Math.random() * 1000 + 500 }),\n                backgroundColor: 'rgba(235, 162, 235, 1)',\n              },\n          ],\n        };\n  \n      return(\n        <TitleCard title={\"Sales\"} topMargin=\"mt-2\">\n              <Bar options={options} data={data} />\n        </TitleCard>\n  \n      )\n  }\n  \n  \n  export default StackBarChart","import LineChart from './components/LineChart'\nimport BarChart from './components/BarChart'\nimport DoughnutChart from './components/DoughnutChart'\nimport PieChart from './components/PieChart'\nimport ScatterChart from './components/ScatterChart'\nimport StackBarChart from './components/StackBarChart'\nimport Datepicker from \"react-tailwindcss-datepicker\"; \nimport { useState } from 'react'\n\n\n\n\nfunction Charts(){\n\n    const [dateValue, setDateValue] = useState({ \n        startDate: new Date(), \n        endDate: new Date() \n    }); \n    \n    const handleDatePickerValueChange = (newValue) => {\n        console.log(\"newValue:\", newValue); \n        setDateValue(newValue); \n    } \n\n    return(\n        <>\n        <Datepicker \n                containerClassName=\"w-72\" \n                value={dateValue} \n                theme={\"light\"}\n                inputClassName=\"input input-bordered w-72\" \n                popoverDirection={\"down\"}\n                toggleClassName=\"invisible\"\n                onChange={handleDatePickerValueChange} \n                showShortcuts={true} \n                primaryColor={\"white\"} \n            /> \n        {/** ---------------------- Different charts ------------------------- */}\n            <div className=\"grid lg:grid-cols-2 mt-0 grid-cols-1 gap-6\">\n                <StackBarChart />\n                <BarChart />\n            </div>\n\n        \n            <div className=\"grid lg:grid-cols-2 mt-4 grid-cols-1 gap-6\">\n                <DoughnutChart />\n                <PieChart />\n            </div>\n\n            <div className=\"grid lg:grid-cols-2 mt-4 grid-cols-1 gap-6\">\n                <ScatterChart />\n                <LineChart />\n            </div>\n        </>\n    )\n}\n\nexport default Charts","import { useEffect } from 'react'\nimport { useDispatch } from 'react-redux'\nimport Charts from '../../features/charts'\nimport { setPageTitle } from '../../features/common/headerSlice'\n\nfunction InternalPage(){\n    const dispatch = useDispatch()\n\n    useEffect(() => {\n        dispatch(setPageTitle({ title : \"Analytics\"}))\n      }, [])\n\n\n    return(\n        <Charts />\n    )\n}\n\nexport default InternalPage"],"names":["ChartJS","register","CategoryScale","LinearScale","PointElement","LineElement","Title","Tooltip","Filler","Legend","labels","data","datasets","fill","label","map","Math","random","borderColor","backgroundColor","_jsx","TitleCard","title","children","Line","options","responsive","plugins","legend","position","BarElement","topMargin","Bar","ArcElement","borderWidth","Doughnut","Pie","Array","from","length","x","y","Scatter","scales","beginAtZero","stacked","_useState","useState","startDate","Date","endDate","_useState2","_slicedToArray","dateValue","setDateValue","_jsxs","_Fragment","Datepicker","containerClassName","value","theme","inputClassName","popoverDirection","toggleClassName","onChange","newValue","console","log","showShortcuts","primaryColor","className","StackBarChart","BarChart","DoughnutChart","PieChart","ScatterChart","LineChart","dispatch","useDispatch","useEffect","setPageTitle","Charts"],"sourceRoot":""}